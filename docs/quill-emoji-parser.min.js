!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("quill")):"function"==typeof define&&define.amd?define(["exports","quill"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).EmojiParser={},e.Quill)}(this,(function(e,t){"use strict";const s=t.import("delta");let i=class{_quill;_baseMap;_currentMap;_emojisBlacklist=[];_parseOnBlur=!1;_onBeforePaste=(e,t)=>{};_onPasted=(e,t)=>{};_onBeforeTextChange=e=>{};_onTextChanged=e=>{};_onBeforeUpdate=(e,t)=>!0;_onUpdated=(e,t,s,i)=>{};_boundTextToEmoji;constructor(e,t){this._quill=e,this._baseMap={...t.map},this._currentMap=this._baseMap,this._bypassShortcuts(t.bypassShortcuts),this._bypassEmojis(t.bypassEmojis),t.onBeforePaste&&(this._onBeforePaste=t.onBeforePaste.bind(this)),t.onPasted&&(this._onPasted=t.onPasted.bind(this)),t.onBeforeTextChange&&(this._onBeforeTextChange=t.onBeforeTextChange.bind(this)),t.onTextChanged&&(this._onTextChanged=t.onTextChanged.bind(this)),t.onBeforeUpdate&&(this._onBeforeUpdate=t.onBeforeUpdate.bind(this)),t.onUpdated&&(this._onUpdated=t.onUpdated.bind(this)),this._parseOnBlur=t.parseOnBlur||!1,this._boundTextToEmoji=this._checkTextForEmoji.bind(this),this.registerTypeListener(),this.registerPasteListener(),this.registerBlurListener(),t.onInstance&&t.onInstance({refresh:this._refresh.bind(this),bypassShortcuts:this._bypassShortcuts.bind(this),bypassEmojis:this._bypassEmojis.bind(this),parseOnBlur:e=>{this._parseOnBlur=e,this._quill.root.removeEventListener("blur",this._boundTextToEmoji),this.registerBlurListener()}})}registerPasteListener(){this._quill.clipboard.addMatcher(Node.TEXT_NODE,((e,t)=>{if("string"!=typeof e.data)return;this._onBeforePaste(e,t);const s=t.ops[0];if(!s.insert)return t;for(const r of this._emojisBlacklist)s.insert=s.insert.replaceAll(r,"");const i=s.insert&&s.insert.split(" ");if(i)for(const r of i)if(r in this._currentMap){const e=this._currentMap[r];!1!==this._onBeforeUpdate(r,e)&&(s.insert=s.insert.replace(r,e),this._onUpdated(r,e,s,this._quill.getSelection()))}return this._onPasted(e,t),t}))}registerTypeListener(){this._quill.on("text-change",(e=>{const t=e.ops;if(!t||t.length<1||t.length>2)return;const s=t[t.length-1];s.insert&&"string"==typeof s.insert&&s.insert.match(/\s/)&&(this._onBeforeTextChange(e),this._checkTextForEmoji(),this._onTextChanged(e))}))}registerBlurListener(){this._parseOnBlur&&this._quill.root.addEventListener("blur",this._boundTextToEmoji)}_checkTextForEmoji(){const e=this._quill.hasFocus(),t=this._quill.getSelection(!1!==e&&void 0);if(!t)return;const[i]=this._quill.getLeaf(t.index),r=this._quill.getIndex(i);if(!i.text)return;const n=t.index-r,o=i.text.slice(0,n);if(!o)return;const l=o&&o.split(" ");if(l)for(const a of l)if(a in this._currentMap){const t=this._currentMap[a];if(!1!==this._onBeforeUpdate(a,t)){const i=(new s).retain(r+o.indexOf(a)).delete(a.length).insert(t);this._quill.updateContents(i),queueMicrotask((()=>{this._quill.setSelection(r+o.indexOf(a)+t.length+1,0,"silent"),this._onUpdated(a,t,i,this._quill.getSelection()),e||this._quill.blur()}))}}}async _refresh(){const e=this._quill.hasFocus(),t=this._quill.getSelection(!0),s=this._quill.root.innerHTML;this._quill.setContents([{insert:"\n"}]),this._quill.setSelection(0,this._quill.scroll.length()),this._quill.clipboard.dangerouslyPasteHTML(s),queueMicrotask((()=>{t&&this._quill.setSelection(t.index,t.length),e||this._quill.blur()}))}_bypassShortcuts(e){if(e)if(e instanceof RegExp)this._currentMap=Object.fromEntries(Object.entries(this._baseMap).filter((([t])=>!e.test(t))));else if(Array.isArray(e))this._currentMap=Object.fromEntries(Object.entries(this._baseMap).filter((([t])=>!e.includes(t))));else if("string"!=typeof e);else{const t=this._stringToRegex(e.trim());if(t)return void(this._currentMap=Object.fromEntries(Object.entries({...this._baseMap}).filter((([e])=>!t.test(e)))));const s=e.split(" ");this._currentMap=Object.fromEntries(Object.entries(this._baseMap).filter((([e])=>!s.includes(e))))}else this._currentMap={...this._baseMap}}_bypassEmojis(e){if(this._emojisBlacklist.length=0,e){if(e instanceof RegExp)return this._currentMap=Object.fromEntries(Object.entries(this._baseMap).filter((([t,s])=>!e.test(s)))),void this._blacklistEmojis();if(Array.isArray(e))return this._currentMap=Object.fromEntries(Object.entries(this._baseMap).filter((([t,s])=>!e.includes(s)))),void this._blacklistEmojis();if("string"!=typeof e);else{let t=!1;const s=this._stringToRegex(e.trim());if(s&&(this._currentMap=Object.fromEntries(Object.entries(this._baseMap).filter((([e,t])=>!s.test(t)))),t=!0),!t){const t=e.split(" ");this._currentMap=Object.fromEntries(Object.entries(this._baseMap).filter((([e,s])=>!t.includes(s))))}this._blacklistEmojis()}}else this._currentMap={...this._baseMap}}_blacklistEmojis(){this._emojisBlacklist=Array.from(new Set(Object.values(this._baseMap).filter((e=>!Object.values(this._currentMap).includes(e)))))}_stringToRegex(e){const t=e.match(/^\/((?:\\.|[^\\])*)\/(.*)$/);if(t)return new RegExp(t[1],t[2])}};class r extends i{constructor(e,t){if(!t.map)throw new Error("quill-emoji-parser: Please provide a correspondance `map` in module's options.");super(e,t)}}null!=window&&window.Quill&&window.Quill.register("modules/emojiParser",r),e.EmojiParser=r,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
